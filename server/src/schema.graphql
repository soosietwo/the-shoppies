type NomineeConnection {
  pageInfo: PageInfo!
  edges: [NomineeEdge]!
  aggregate: AggregateNominee!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type NomineeEdge {
  node: Nominee!
  cursor: String!
}

type BatchPayload {
  count: Long!
}

scalar Long

type AggregateNominee {
  count: Int!
}

type Movie {
  id: ID!
  title: String!
  poster: String
  year: Int!
}

type MovieQueryResult {
  movies: [Movie]!
  totalResults: Int!
}

type Nominee {
  id: ID!
  title: String!
  poster: String
  year: Int!
}

type Query {
  nominees: [Nominee]!
  movies(searchTerm: String, page: Int!): MovieQueryResult!
  nomineesConnection: NomineeConnection!
}

type Mutation {
  addNominee(id: ID!, title: String!, poster: String, year: Int!): Nominee!
  deleteNominee(id: ID!): Nominee!
  deleteAllNominees: BatchPayload!
}
